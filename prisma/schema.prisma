// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  githubId      String    @unique
  username      String    @unique
  displayName   String?
  avatarUrl     String?
  email         String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  userStats     UserStats[]
  messageStats  MessageStats[]
  preferences   UserPreferences?
  sessions      Session[]
  accounts      Account[]
  apiTokens     ApiToken[]
  folderProjects FolderProject[]
  
  @@map("users")
}

model MessageStats {
  hash                  String    @id
  userId                String
  application           String    @default("claude_code") // "claude_code", "gemini_cli", "codex_cli"
  type                  String    // "AI" or "User"
  timestamp             String
  conversationFile      String
  inputTokens           Int?
  outputTokens          Int?
  cacheCreationTokens   Int?
  cacheReadTokens       Int?
  cachedTokens          Int?
  cost                  Float?
  model                 String?
  toolCalls             Int?
  fileTypes             Json?
  terminalCommands      Int?
  fileSearches          Int?
  fileContentSearches   Int?
  filesRead             Int?
  filesAdded            Int?
  filesEdited           Int?
  filesDeleted          Int?
  linesRead             Int?
  linesEdited           Int?
  linesAdded            Int?
  linesDeleted          Int?
  bytesRead             Int?
  bytesAdded            Int?
  bytesEdited           Int?
  bytesDeleted          Int?
  codeLines             Int?
  docsLines             Int?
  dataLines             Int?
  mediaLines            Int?
  configLines           Int?
  otherLines            Int?
  todosCreated          Int       @default(0)
  todosCompleted        Int       @default(0)
  todosInProgress       Int       @default(0)
  todoWrites            Int       @default(0)
  todoReads             Int       @default(0)
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, timestamp])
  @@index([timestamp])
  @@index([application, timestamp])
  @@map("message_stats")
}

model UserStats {
  id                    String   @id @default(cuid())
  userId                String
  application           String   @default("claude_code") // "claude_code", "gemini_cli", "codex_cli"
  period                String   // "hourly", "daily", "weekly", "monthly", "yearly", "all-time"
  periodStart           DateTime?
  periodEnd             DateTime?
  toolCalls             Int      @default(0)
  aiMessages            Int      @default(0)
  userMessages          Int      @default(0)
  inputTokens           Int      @default(0)
  outputTokens          Int      @default(0)
  cacheCreationTokens   Int      @default(0)
  cacheReadTokens       Int      @default(0)
  cachedTokens          Int      @default(0)
  cost                  Float    @default(0)
  filesRead             Int      @default(0)
  filesAdded            Int      @default(0)
  filesEdited           Int      @default(0)
  filesDeleted          Int      @default(0)
  linesRead             Int      @default(0)
  linesAdded            Int      @default(0)
  linesEdited           Int      @default(0)
  linesDeleted          Int      @default(0)
  bytesRead             Int      @default(0)
  bytesAdded            Int      @default(0)
  bytesEdited           Int      @default(0)
  bytesDeleted          Int      @default(0)
  codeLines             Int      @default(0)
  docsLines             Int      @default(0)
  dataLines             Int      @default(0)
  mediaLines            Int      @default(0)
  configLines           Int      @default(0)
  otherLines            Int      @default(0)
  terminalCommands      Int      @default(0)
  fileSearches          Int      @default(0)
  fileContentSearches   Int      @default(0)
  todosCreated          Int      @default(0)
  todosCompleted        Int      @default(0)
  todosInProgress       Int      @default(0)
  todoWrites            Int      @default(0)
  todoReads             Int      @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, period, application])
  @@index([application, period])
  @@map("user_stats")
}

model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  
  // Display preferences
  displayNamePreference String   @default("displayName") // "displayName" | "username"
  
  // Localization
  locale                String   @default("en")
  timezone              String   @default("UTC")
  currency              String   @default("USD")
  
  // Privacy settings
  optOutPublic          Boolean  @default(false)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relationships
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// API tokens for CLI access
model ApiToken {
  id          String   @id @default(cuid())
  userId      String
  token       String   @unique
  name        String   @default("CLI Token")
  lastUsed    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  
  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_tokens")
}

// Projects table
model Project {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  openSource    Boolean  @default(false)
  githubLink    String?
  websiteLink   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  folderProjects FolderProject[]
  
  @@map("projects")
}

// Association table for folders and projects
model FolderProject {
  id        String   @id @default(cuid())
  userId    String
  folder    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([userId, folder])
  @@map("folder_projects")
}


